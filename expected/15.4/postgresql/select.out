--
-- postgreSql
-- select
--
\set ECHO none
\i sql/15.4/select.sql
--
-- SELECT
--
--Testcase 1:
CREATE EXTENSION :DB_EXTENSIONNAME;
--Testcase 2:
CREATE SERVER :DB_SERVERNAME FOREIGN DATA WRAPPER :DB_EXTENSIONNAME
  OPTIONS (odbc_DRIVER :DB_DRIVERNAME, odbc_SERVER :DB_SERVER, odbc_port :DB_PORT, odbc_DATABASE :DB_DATABASE);
--Testcase 3:
CREATE USER MAPPING FOR public SERVER :DB_SERVERNAME OPTIONS (odbc_UID :DB_USER, odbc_PWD :DB_PASS);  
--Testcase 4:
CREATE FOREIGN TABLE onek (
  unique1   int4,
  unique2   int4,
  two       int4,
  four      int4,
  ten       int4,
  twenty    int4,
  hundred   int4,
  thousand  int4,
  twothousand int4,
  fivethous int4,
  tenthous  int4,
  odd       int4,
  even      int4,
  stringu1  name,
  stringu2  name,
  string4   name) SERVER :DB_SERVERNAME OPTIONS (schema :DB_SCHEMA, table 'onek');
--Testcase 5:
CREATE FOREIGN TABLE onek2 (
  unique1   int4,
  unique2   int4,
  two       int4,
  four      int4,
  ten       int4,
  twenty    int4,
  hundred   int4,
  thousand  int4,
  twothousand int4,
  fivethous int4,
  tenthous  int4,
  odd       int4,
  even      int4,
  stringu1  name,
  stringu2  name,
  string4   name) SERVER :DB_SERVERNAME OPTIONS (schema :DB_SCHEMA, table 'onek');  
--Testcase 6:
CREATE FOREIGN TABLE int8_tbl (q1 int8, q2 int8) SERVER :DB_SERVERNAME OPTIONS (schema :DB_SCHEMA, table 'int8_tbl');
-- btree index
-- awk '{if($1<10){print;}else{next;}}' onek.data | sort +0n -1
--
--Testcase 7:
EXPLAIN VERBOSE
SELECT * FROM onek
   WHERE onek.unique1 < 10
   ORDER BY onek.unique1;
                                                                                                QUERY PLAN                                                                                                
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=1074.83..1077.33 rows=1000 width=244)
   Output: unique1, unique2, two, four, ten, twenty, hundred, thousand, twothousand, fivethous, tenthous, odd, even, stringu1, stringu2, string4
   Sort Key: onek.unique1
   ->  Foreign Scan on public.onek  (cost=25.00..1025.00 rows=1000 width=244)
         Output: unique1, unique2, two, four, ten, twenty, hundred, thousand, twothousand, fivethous, tenthous, odd, even, stringu1, stringu2, string4
         Foreign Table Size: 1000 b
         Remote SQL: SELECT unique1, unique2, two, four, ten, twenty, hundred, thousand, twothousand, fivethous, tenthous, odd, even, stringu1, stringu2, string4 FROM public.onek WHERE ((unique1 < 10))
(7 rows)

--Testcase 8:
SELECT * FROM onek
   WHERE onek.unique1 < 10
   ORDER BY onek.unique1;
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
       0 |     998 |   0 |    0 |   0 |      0 |       0 |        0 |           0 |         0 |        0 |   0 |    1 | AAAAAA   | KMBAAA   | OOOOxx
       1 |     214 |   1 |    1 |   1 |      1 |       1 |        1 |           1 |         1 |        1 |   2 |    3 | BAAAAA   | GIAAAA   | OOOOxx
       2 |     326 |   0 |    2 |   2 |      2 |       2 |        2 |           2 |         2 |        2 |   4 |    5 | CAAAAA   | OMAAAA   | OOOOxx
       3 |     431 |   1 |    3 |   3 |      3 |       3 |        3 |           3 |         3 |        3 |   6 |    7 | DAAAAA   | PQAAAA   | VVVVxx
       4 |     833 |   0 |    0 |   4 |      4 |       4 |        4 |           4 |         4 |        4 |   8 |    9 | EAAAAA   | BGBAAA   | HHHHxx
       5 |     541 |   1 |    1 |   5 |      5 |       5 |        5 |           5 |         5 |        5 |  10 |   11 | FAAAAA   | VUAAAA   | HHHHxx
       6 |     978 |   0 |    2 |   6 |      6 |       6 |        6 |           6 |         6 |        6 |  12 |   13 | GAAAAA   | QLBAAA   | OOOOxx
       7 |     647 |   1 |    3 |   7 |      7 |       7 |        7 |           7 |         7 |        7 |  14 |   15 | HAAAAA   | XYAAAA   | VVVVxx
       8 |     653 |   0 |    0 |   8 |      8 |       8 |        8 |           8 |         8 |        8 |  16 |   17 | IAAAAA   | DZAAAA   | HHHHxx
       9 |      49 |   1 |    1 |   9 |      9 |       9 |        9 |           9 |         9 |        9 |  18 |   19 | JAAAAA   | XBAAAA   | HHHHxx
(10 rows)

--
-- awk '{if($1<20){print $1,$14;}else{next;}}' onek.data | sort +0nr -1
--
--Testcase 9:
EXPLAIN VERBOSE
SELECT onek.unique1, onek.stringu1 FROM onek
   WHERE onek.unique1 < 20
   ORDER BY unique1 using >;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Sort  (cost=1074.83..1077.33 rows=1000 width=68)
   Output: unique1, stringu1
   Sort Key: onek.unique1 DESC
   ->  Foreign Scan on public.onek  (cost=25.00..1025.00 rows=1000 width=68)
         Output: unique1, stringu1
         Foreign Table Size: 1000 b
         Remote SQL: SELECT unique1, stringu1 FROM public.onek WHERE ((unique1 < 20))
(7 rows)

--Testcase 10:
SELECT onek.unique1, onek.stringu1 FROM onek
   WHERE onek.unique1 < 20
   ORDER BY unique1 using >;
 unique1 | stringu1 
---------+----------
      19 | TAAAAA
      18 | SAAAAA
      17 | RAAAAA
      16 | QAAAAA
      15 | PAAAAA
      14 | OAAAAA
      13 | NAAAAA
      12 | MAAAAA
      11 | LAAAAA
      10 | KAAAAA
       9 | JAAAAA
       8 | IAAAAA
       7 | HAAAAA
       6 | GAAAAA
       5 | FAAAAA
       4 | EAAAAA
       3 | DAAAAA
       2 | CAAAAA
       1 | BAAAAA
       0 | AAAAAA
(20 rows)

--
-- awk '{if($1>980){print $1,$14;}else{next;}}' onek.data | sort +1d -2
--
--Testcase 11:
EXPLAIN VERBOSE
SELECT onek.unique1, onek.stringu1 FROM onek
   WHERE onek.unique1 > 980
   ORDER BY stringu1 using <;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Sort  (cost=1074.83..1077.33 rows=1000 width=68)
   Output: unique1, stringu1
   Sort Key: onek.stringu1
   ->  Foreign Scan on public.onek  (cost=25.00..1025.00 rows=1000 width=68)
         Output: unique1, stringu1
         Foreign Table Size: 1000 b
         Remote SQL: SELECT unique1, stringu1 FROM public.onek WHERE ((unique1 > 980))
(7 rows)

SELECT onek.unique1, onek.stringu1 FROM onek
   WHERE onek.unique1 > 980
   ORDER BY stringu1 using <;
 unique1 | stringu1 
---------+----------
     988 | AMAAAA
     989 | BMAAAA
     990 | CMAAAA
     991 | DMAAAA
     992 | EMAAAA
     993 | FMAAAA
     994 | GMAAAA
     995 | HMAAAA
     996 | IMAAAA
     997 | JMAAAA
     998 | KMAAAA
     999 | LMAAAA
     981 | TLAAAA
     982 | ULAAAA
     983 | VLAAAA
     984 | WLAAAA
     985 | XLAAAA
     986 | YLAAAA
     987 | ZLAAAA
(19 rows)

--
-- awk '{if($1>980){print $1,$16;}else{next;}}' onek.data |
-- sort +1d -2 +0nr -1
--
--Testcase 12:
EXPLAIN VERBOSE
SELECT onek.unique1, onek.string4 FROM onek
   WHERE onek.unique1 > 980
   ORDER BY string4 using <, unique1 using >;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Sort  (cost=1074.83..1077.33 rows=1000 width=68)
   Output: unique1, string4
   Sort Key: onek.string4, onek.unique1 DESC
   ->  Foreign Scan on public.onek  (cost=25.00..1025.00 rows=1000 width=68)
         Output: unique1, string4
         Foreign Table Size: 1000 b
         Remote SQL: SELECT unique1, string4 FROM public.onek WHERE ((unique1 > 980))
(7 rows)

--Testcase 13:
SELECT onek.unique1, onek.string4 FROM onek
   WHERE onek.unique1 > 980
   ORDER BY string4 using <, unique1 using >;
 unique1 | string4 
---------+---------
     999 | AAAAxx
     995 | AAAAxx
     983 | AAAAxx
     982 | AAAAxx
     981 | AAAAxx
     998 | HHHHxx
     997 | HHHHxx
     993 | HHHHxx
     990 | HHHHxx
     986 | HHHHxx
     996 | OOOOxx
     991 | OOOOxx
     988 | OOOOxx
     987 | OOOOxx
     985 | OOOOxx
     994 | VVVVxx
     992 | VVVVxx
     989 | VVVVxx
     984 | VVVVxx
(19 rows)

--
-- awk '{if($1>980){print $1,$16;}else{next;}}' onek.data |
-- sort +1dr -2 +0n -1
--
--Testcase 14:
EXPLAIN VERBOSE
SELECT onek.unique1, onek.string4 FROM onek
   WHERE onek.unique1 > 980
   ORDER BY string4 using >, unique1 using <;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Sort  (cost=1074.83..1077.33 rows=1000 width=68)
   Output: unique1, string4
   Sort Key: onek.string4 DESC, onek.unique1
   ->  Foreign Scan on public.onek  (cost=25.00..1025.00 rows=1000 width=68)
         Output: unique1, string4
         Foreign Table Size: 1000 b
         Remote SQL: SELECT unique1, string4 FROM public.onek WHERE ((unique1 > 980))
(7 rows)

--Testcase 15:
SELECT onek.unique1, onek.string4 FROM onek
   WHERE onek.unique1 > 980
   ORDER BY string4 using >, unique1 using <;
 unique1 | string4 
---------+---------
     984 | VVVVxx
     989 | VVVVxx
     992 | VVVVxx
     994 | VVVVxx
     985 | OOOOxx
     987 | OOOOxx
     988 | OOOOxx
     991 | OOOOxx
     996 | OOOOxx
     986 | HHHHxx
     990 | HHHHxx
     993 | HHHHxx
     997 | HHHHxx
     998 | HHHHxx
     981 | AAAAxx
     982 | AAAAxx
     983 | AAAAxx
     995 | AAAAxx
     999 | AAAAxx
(19 rows)

--
-- awk '{if($1<20){print $1,$16;}else{next;}}' onek.data |
-- sort +0nr -1 +1d -2
--
--Testcase 16:
EXPLAIN VERBOSE
SELECT onek.unique1, onek.string4 FROM onek
   WHERE onek.unique1 < 20
   ORDER BY unique1 using >, string4 using <;
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Sort  (cost=1074.83..1077.33 rows=1000 width=68)
   Output: unique1, string4
   Sort Key: onek.unique1 DESC, onek.string4
   ->  Foreign Scan on public.onek  (cost=25.00..1025.00 rows=1000 width=68)
         Output: unique1, string4
         Foreign Table Size: 1000 b
         Remote SQL: SELECT unique1, string4 FROM public.onek WHERE ((unique1 < 20))
(7 rows)

--Testcase 17:
SELECT onek.unique1, onek.string4 FROM onek
   WHERE onek.unique1 < 20
   ORDER BY unique1 using >, string4 using <;
 unique1 | string4 
---------+---------
      19 | OOOOxx
      18 | VVVVxx
      17 | HHHHxx
      16 | OOOOxx
      15 | VVVVxx
      14 | AAAAxx
      13 | OOOOxx
      12 | AAAAxx
      11 | OOOOxx
      10 | AAAAxx
       9 | HHHHxx
       8 | HHHHxx
       7 | VVVVxx
       6 | OOOOxx
       5 | HHHHxx
       4 | HHHHxx
       3 | VVVVxx
       2 | OOOOxx
       1 | OOOOxx
       0 | OOOOxx
(20 rows)

--
-- awk '{if($1<20){print $1,$16;}else{next;}}' onek.data |
-- sort +0n -1 +1dr -2
--
--Testcase 18:
EXPLAIN VERBOSE
SELECT onek.unique1, onek.string4 FROM onek
   WHERE onek.unique1 < 20
   ORDER BY unique1 using <, string4 using >;
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Sort  (cost=1074.83..1077.33 rows=1000 width=68)
   Output: unique1, string4
   Sort Key: onek.unique1, onek.string4 DESC
   ->  Foreign Scan on public.onek  (cost=25.00..1025.00 rows=1000 width=68)
         Output: unique1, string4
         Foreign Table Size: 1000 b
         Remote SQL: SELECT unique1, string4 FROM public.onek WHERE ((unique1 < 20))
(7 rows)

--Testcase 19:
SELECT onek.unique1, onek.string4 FROM onek
   WHERE onek.unique1 < 20
   ORDER BY unique1 using <, string4 using >;
 unique1 | string4 
---------+---------
       0 | OOOOxx
       1 | OOOOxx
       2 | OOOOxx
       3 | VVVVxx
       4 | HHHHxx
       5 | HHHHxx
       6 | OOOOxx
       7 | VVVVxx
       8 | HHHHxx
       9 | HHHHxx
      10 | AAAAxx
      11 | OOOOxx
      12 | AAAAxx
      13 | OOOOxx
      14 | AAAAxx
      15 | VVVVxx
      16 | OOOOxx
      17 | HHHHxx
      18 | VVVVxx
      19 | OOOOxx
(20 rows)

--
-- test partial btree indexes
--
-- As of 7.2, planner probably won't pick an indexscan without stats,
-- so ANALYZE first.  Also, we want to prevent it from picking a bitmapscan
-- followed by sort, because that could hide index ordering problems.
--
-- ANALYZE onek2;
--Testcase 20:
SET enable_seqscan TO off;
--Testcase 21:
SET enable_bitmapscan TO off;
--Testcase 22:
SET enable_sort TO off;
--
-- awk '{if($1<10){print $0;}else{next;}}' onek.data | sort +0n -1
--
--Testcase 23:
EXPLAIN VERBOSE
SELECT onek2.* FROM onek2 WHERE onek2.unique1 < 10 ORDER BY onek2.unique1; -- add ORDER BY to stablize test result
                                                                                                QUERY PLAN                                                                                                
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=10000001074.83..10000001077.33 rows=1000 width=244)
   Output: unique1, unique2, two, four, ten, twenty, hundred, thousand, twothousand, fivethous, tenthous, odd, even, stringu1, stringu2, string4
   Sort Key: onek2.unique1
   ->  Foreign Scan on public.onek2  (cost=25.00..1025.00 rows=1000 width=244)
         Output: unique1, unique2, two, four, ten, twenty, hundred, thousand, twothousand, fivethous, tenthous, odd, even, stringu1, stringu2, string4
         Foreign Table Size: 1000 b
         Remote SQL: SELECT unique1, unique2, two, four, ten, twenty, hundred, thousand, twothousand, fivethous, tenthous, odd, even, stringu1, stringu2, string4 FROM public.onek WHERE ((unique1 < 10))
(7 rows)

--Testcase 24:
SELECT onek2.* FROM onek2 WHERE onek2.unique1 < 10 ORDER BY onek2.unique1; -- add ORDER BY to stablize test result
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
       0 |     998 |   0 |    0 |   0 |      0 |       0 |        0 |           0 |         0 |        0 |   0 |    1 | AAAAAA   | KMBAAA   | OOOOxx
       1 |     214 |   1 |    1 |   1 |      1 |       1 |        1 |           1 |         1 |        1 |   2 |    3 | BAAAAA   | GIAAAA   | OOOOxx
       2 |     326 |   0 |    2 |   2 |      2 |       2 |        2 |           2 |         2 |        2 |   4 |    5 | CAAAAA   | OMAAAA   | OOOOxx
       3 |     431 |   1 |    3 |   3 |      3 |       3 |        3 |           3 |         3 |        3 |   6 |    7 | DAAAAA   | PQAAAA   | VVVVxx
       4 |     833 |   0 |    0 |   4 |      4 |       4 |        4 |           4 |         4 |        4 |   8 |    9 | EAAAAA   | BGBAAA   | HHHHxx
       5 |     541 |   1 |    1 |   5 |      5 |       5 |        5 |           5 |         5 |        5 |  10 |   11 | FAAAAA   | VUAAAA   | HHHHxx
       6 |     978 |   0 |    2 |   6 |      6 |       6 |        6 |           6 |         6 |        6 |  12 |   13 | GAAAAA   | QLBAAA   | OOOOxx
       7 |     647 |   1 |    3 |   7 |      7 |       7 |        7 |           7 |         7 |        7 |  14 |   15 | HAAAAA   | XYAAAA   | VVVVxx
       8 |     653 |   0 |    0 |   8 |      8 |       8 |        8 |           8 |         8 |        8 |  16 |   17 | IAAAAA   | DZAAAA   | HHHHxx
       9 |      49 |   1 |    1 |   9 |      9 |       9 |        9 |           9 |         9 |        9 |  18 |   19 | JAAAAA   | XBAAAA   | HHHHxx
(10 rows)

--
-- awk '{if($1<20){print $1,$14;}else{next;}}' onek.data | sort +0nr -1
--
--Testcase 25:
EXPLAIN VERBOSE
SELECT onek2.unique1, onek2.stringu1 FROM onek2
    WHERE onek2.unique1 < 20
    ORDER BY unique1 using >;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Sort  (cost=10000001074.83..10000001077.33 rows=1000 width=68)
   Output: unique1, stringu1
   Sort Key: onek2.unique1 DESC
   ->  Foreign Scan on public.onek2  (cost=25.00..1025.00 rows=1000 width=68)
         Output: unique1, stringu1
         Foreign Table Size: 1000 b
         Remote SQL: SELECT unique1, stringu1 FROM public.onek WHERE ((unique1 < 20))
(7 rows)

--Testcase 26:
SELECT onek2.unique1, onek2.stringu1 FROM onek2
    WHERE onek2.unique1 < 20
    ORDER BY unique1 using >;
 unique1 | stringu1 
---------+----------
      19 | TAAAAA
      18 | SAAAAA
      17 | RAAAAA
      16 | QAAAAA
      15 | PAAAAA
      14 | OAAAAA
      13 | NAAAAA
      12 | MAAAAA
      11 | LAAAAA
      10 | KAAAAA
       9 | JAAAAA
       8 | IAAAAA
       7 | HAAAAA
       6 | GAAAAA
       5 | FAAAAA
       4 | EAAAAA
       3 | DAAAAA
       2 | CAAAAA
       1 | BAAAAA
       0 | AAAAAA
(20 rows)

--
-- awk '{if($1>980){print $1,$14;}else{next;}}' onek.data | sort +1d -2
--
--Testcase 27:
EXPLAIN VERBOSE
SELECT onek2.unique1, onek2.stringu1 FROM onek2
   WHERE onek2.unique1 > 980 ORDER BY onek2.unique1;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Sort  (cost=10000001074.83..10000001077.33 rows=1000 width=68)
   Output: unique1, stringu1
   Sort Key: onek2.unique1
   ->  Foreign Scan on public.onek2  (cost=25.00..1025.00 rows=1000 width=68)
         Output: unique1, stringu1
         Foreign Table Size: 1000 b
         Remote SQL: SELECT unique1, stringu1 FROM public.onek WHERE ((unique1 > 980))
(7 rows)

--Testcase 28:
SELECT onek2.unique1, onek2.stringu1 FROM onek2
   WHERE onek2.unique1 > 980 ORDER BY onek2.unique1;
 unique1 | stringu1 
---------+----------
     981 | TLAAAA
     982 | ULAAAA
     983 | VLAAAA
     984 | WLAAAA
     985 | XLAAAA
     986 | YLAAAA
     987 | ZLAAAA
     988 | AMAAAA
     989 | BMAAAA
     990 | CMAAAA
     991 | DMAAAA
     992 | EMAAAA
     993 | FMAAAA
     994 | GMAAAA
     995 | HMAAAA
     996 | IMAAAA
     997 | JMAAAA
     998 | KMAAAA
     999 | LMAAAA
(19 rows)

--Testcase 29:
RESET enable_seqscan;
--Testcase 30:
RESET enable_bitmapscan;
--Testcase 31:
RESET enable_sort;
--
-- Test VALUES lists
--
--Testcase 32:
EXPLAIN VERBOSE
select * from onek, (values(147, 'RFAAAA'), (931, 'VJAAAA')) as v (i, j)
    WHERE onek.unique1 = v.i and onek.stringu1 = v.j;
                                                                                                                               QUERY PLAN                                                                                                                                
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Hash Join  (cost=25.05..1032.57 rows=1 width=280)
   Output: onek.unique1, onek.unique2, onek.two, onek.four, onek.ten, onek.twenty, onek.hundred, onek.thousand, onek.twothousand, onek.fivethous, onek.tenthous, onek.odd, onek.even, onek.stringu1, onek.stringu2, onek.string4, "*VALUES*".column1, "*VALUES*".column2
   Hash Cond: ((onek.unique1 = "*VALUES*".column1) AND (onek.stringu1 = ("*VALUES*".column2)::text))
   ->  Foreign Scan on public.onek  (cost=25.00..1025.00 rows=1000 width=244)
         Output: onek.unique1, onek.unique2, onek.two, onek.four, onek.ten, onek.twenty, onek.hundred, onek.thousand, onek.twothousand, onek.fivethous, onek.tenthous, onek.odd, onek.even, onek.stringu1, onek.stringu2, onek.string4
         Foreign Table Size: 1000 b
         Remote SQL: SELECT unique1, unique2, two, four, ten, twenty, hundred, thousand, twothousand, fivethous, tenthous, odd, even, stringu1, stringu2, string4 FROM public.onek
   ->  Hash  (cost=0.03..0.03 rows=2 width=36)
         Output: "*VALUES*".column1, "*VALUES*".column2
         ->  Values Scan on "*VALUES*"  (cost=0.00..0.03 rows=2 width=36)
               Output: "*VALUES*".column1, "*VALUES*".column2
(11 rows)

--Testcase 33:
select * from onek, (values(147, 'RFAAAA'), (931, 'VJAAAA')) as v (i, j)
    WHERE onek.unique1 = v.i and onek.stringu1 = v.j;
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 |  i  |   j    
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------+-----+--------
     147 |       0 |   1 |    3 |   7 |      7 |       7 |       47 |         147 |       147 |      147 |  14 |   15 | RFAAAA   | AAAAAA   | AAAAxx  | 147 | RFAAAA
     931 |       1 |   1 |    3 |   1 |     11 |       1 |       31 |         131 |       431 |      931 |   2 |    3 | VJAAAA   | BAAAAA   | HHHHxx  | 931 | VJAAAA
(2 rows)

-- a more complex case
-- looks like we're coding lisp :-)
--Testcase 34:
EXPLAIN VERBOSE
select * from onek,
  (values ((select i from
    (values(10000), (2), (389), (1000), (2000), ((select 10029))) as foo(i)
    order by i asc limit 1))) bar (i)
  where onek.unique1 = bar.i;
                                                                                                             QUERY PLAN                                                                                                              
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.onek  (cost=25.23..1025.23 rows=1000 width=248)
   Output: onek.unique1, onek.unique2, onek.two, onek.four, onek.ten, onek.twenty, onek.hundred, onek.thousand, onek.twothousand, onek.fivethous, onek.tenthous, onek.odd, onek.even, onek.stringu1, onek.stringu2, onek.string4, $1
   Filter: (onek.unique1 = $3)
   Foreign Table Size: 1000 b
   Remote SQL: SELECT unique1, unique2, two, four, ten, twenty, hundred, thousand, twothousand, fivethous, tenthous, odd, even, stringu1, stringu2, string4 FROM public.onek
   InitPlan 2 (returns $1)
     ->  Limit  (cost=0.12..0.12 rows=1 width=4)
           Output: "*VALUES*".column1
           InitPlan 1 (returns $0)
             ->  Result  (cost=0.00..0.01 rows=1 width=4)
                   Output: 10029
           ->  Sort  (cost=0.11..0.12 rows=6 width=4)
                 Output: "*VALUES*".column1
                 Sort Key: "*VALUES*".column1
                 ->  Values Scan on "*VALUES*"  (cost=0.00..0.08 rows=6 width=4)
                       Output: "*VALUES*".column1
   InitPlan 4 (returns $3)
     ->  Limit  (cost=0.12..0.12 rows=1 width=4)
           Output: "*VALUES*_1".column1
           InitPlan 3 (returns $2)
             ->  Result  (cost=0.00..0.01 rows=1 width=4)
                   Output: 10029
           ->  Sort  (cost=0.11..0.12 rows=6 width=4)
                 Output: "*VALUES*_1".column1
                 Sort Key: "*VALUES*_1".column1
                 ->  Values Scan on "*VALUES*_1"  (cost=0.00..0.08 rows=6 width=4)
                       Output: "*VALUES*_1".column1
(27 rows)

--Testcase 35:
select * from onek,
  (values ((select i from
    (values(10000), (2), (389), (1000), (2000), ((select 10029))) as foo(i)
    order by i asc limit 1))) bar (i)
  where onek.unique1 = bar.i;
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 | i 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------+---
       2 |     326 |   0 |    2 |   2 |      2 |       2 |        2 |           2 |         2 |        2 |   4 |    5 | CAAAAA   | OMAAAA   | OOOOxx  | 2
(1 row)

-- try VALUES in a subquery
--Testcase 36:
EXPLAIN VERBOSE
select * from onek
    where (unique1,ten) in (values (1,1), (20,0), (99,9), (17,99))
    order by unique1;
                                                                                                                 QUERY PLAN                                                                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=1030.37..1030.38 rows=1 width=244)
   Output: onek.unique1, onek.unique2, onek.two, onek.four, onek.ten, onek.twenty, onek.hundred, onek.thousand, onek.twothousand, onek.fivethous, onek.tenthous, onek.odd, onek.even, onek.stringu1, onek.stringu2, onek.string4
   Sort Key: onek.unique1
   ->  Hash Semi Join  (cost=25.11..1030.36 rows=1 width=244)
         Output: onek.unique1, onek.unique2, onek.two, onek.four, onek.ten, onek.twenty, onek.hundred, onek.thousand, onek.twothousand, onek.fivethous, onek.tenthous, onek.odd, onek.even, onek.stringu1, onek.stringu2, onek.string4
         Hash Cond: ((onek.unique1 = "*VALUES*".column1) AND (onek.ten = "*VALUES*".column2))
         ->  Foreign Scan on public.onek  (cost=25.00..1025.00 rows=1000 width=244)
               Output: onek.unique1, onek.unique2, onek.two, onek.four, onek.ten, onek.twenty, onek.hundred, onek.thousand, onek.twothousand, onek.fivethous, onek.tenthous, onek.odd, onek.even, onek.stringu1, onek.stringu2, onek.string4
               Foreign Table Size: 1000 b
               Remote SQL: SELECT unique1, unique2, two, four, ten, twenty, hundred, thousand, twothousand, fivethous, tenthous, odd, even, stringu1, stringu2, string4 FROM public.onek
         ->  Hash  (cost=0.05..0.05 rows=4 width=8)
               Output: "*VALUES*".column1, "*VALUES*".column2
               ->  Values Scan on "*VALUES*"  (cost=0.00..0.05 rows=4 width=8)
                     Output: "*VALUES*".column1, "*VALUES*".column2
(14 rows)

--Testcase 37:
select * from onek
    where (unique1,ten) in (values (1,1), (20,0), (99,9), (17,99))
    order by unique1;
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
       1 |     214 |   1 |    1 |   1 |      1 |       1 |        1 |           1 |         1 |        1 |   2 |    3 | BAAAAA   | GIAAAA   | OOOOxx
      20 |     306 |   0 |    0 |   0 |      0 |       0 |       20 |          20 |        20 |       20 |   0 |    1 | UAAAAA   | ULAAAA   | OOOOxx
      99 |     101 |   1 |    3 |   9 |     19 |       9 |       99 |          99 |        99 |       99 |  18 |   19 | VDAAAA   | XDAAAA   | HHHHxx
(3 rows)

-- VALUES is also legal as a standalone query or a set-operation member
--Testcase 38:
EXPLAIN VERBOSE
VALUES (1,2), (3,4+4), (7,77.7)
UNION ALL
SELECT 2+2, 57
UNION ALL
SELECT q1, q2 FROM int8_tbl;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Append  (cost=0.00..30.27 rows=9 width=40)
   ->  Result  (cost=0.00..0.16 rows=4 width=40)
         Output: "*VALUES*".column1, "*VALUES*".column2
         ->  Append  (cost=0.00..0.11 rows=4 width=36)
               ->  Values Scan on "*VALUES*"  (cost=0.00..0.04 rows=3 width=36)
                     Output: "*VALUES*".column1, "*VALUES*".column2
               ->  Subquery Scan on "*SELECT* 2"  (cost=0.00..0.02 rows=1 width=36)
                     Output: 4, 57
                     ->  Result  (cost=0.00..0.01 rows=1 width=8)
                           Output: 4, 57
   ->  Subquery Scan on "*SELECT* 3"  (cost=25.00..30.06 rows=5 width=40)
         Output: "*SELECT* 3".q1, "*SELECT* 3".q2
         ->  Foreign Scan on public.int8_tbl  (cost=25.00..30.00 rows=5 width=16)
               Output: int8_tbl.q1, int8_tbl.q2
               Foreign Table Size: 5 b
               Remote SQL: SELECT q1, q2 FROM public.int8_tbl
(16 rows)

--Testcase 39:
VALUES (1,2), (3,4+4), (7,77.7)
UNION ALL
SELECT 2+2, 57
UNION ALL
SELECT q1, q2 FROM int8_tbl;
     column1      |      column2      
------------------+-------------------
                1 |                 2
                3 |                 8
                7 |              77.7
                4 |                57
              123 |               456
              123 |  4567890123456789
 4567890123456789 |               123
 4567890123456789 |  4567890123456789
 4567890123456789 | -4567890123456789
(9 rows)

-- corner case: VALUES with no columns
-- PostgreSQL support create table with no column while MYSQL does not, therefore, result for MYSQL for table with no column will be error.
--Testcase 40:
CREATE FOREIGN TABLE nocols() SERVER :DB_SERVERNAME OPTIONS (schema :DB_SCHEMA, table 'nocols');
--Testcase 41:
INSERT INTO nocols DEFAULT VALUES;
--Testcase 42:
SELECT * FROM nocols n, LATERAL (VALUES(n.*)) v;
--
(1 row)

--
-- Test ORDER BY options
--
--Testcase 43:
CREATE FOREIGN TABLE foo (id int, f1 int) SERVER :DB_SERVERNAME OPTIONS (schema :DB_SCHEMA, table 'foo');
--Testcase 44:
EXPLAIN VERBOSE
SELECT * FROM foo ORDER BY f1;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Sort  (cost=32.10..32.12 rows=7 width=8)
   Output: id, f1
   Sort Key: foo.f1
   ->  Foreign Scan on public.foo  (cost=25.00..32.00 rows=7 width=8)
         Output: id, f1
         Foreign Table Size: 7 b
         Remote SQL: SELECT id, f1 FROM public.foo
(7 rows)

--Testcase 45:
SELECT * FROM foo ORDER BY f1;
 id | f1 
----+----
  7 |  1
  2 |  3
  4 |  7
  3 | 10
  1 | 42
  5 |   
  6 |   
(7 rows)

--Testcase 46:
EXPLAIN VERBOSE
SELECT * FROM foo ORDER BY f1 ASC;	-- same thing
                              QUERY PLAN                              
----------------------------------------------------------------------
 Sort  (cost=32.10..32.12 rows=7 width=8)
   Output: id, f1
   Sort Key: foo.f1
   ->  Foreign Scan on public.foo  (cost=25.00..32.00 rows=7 width=8)
         Output: id, f1
         Foreign Table Size: 7 b
         Remote SQL: SELECT id, f1 FROM public.foo
(7 rows)

--Testcase 47:
SELECT * FROM foo ORDER BY f1 ASC;
 id | f1 
----+----
  7 |  1
  2 |  3
  4 |  7
  3 | 10
  1 | 42
  5 |   
  6 |   
(7 rows)

--Testcase 48:
EXPLAIN VERBOSE
SELECT * FROM foo ORDER BY f1 NULLS FIRST;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Sort  (cost=32.10..32.12 rows=7 width=8)
   Output: id, f1
   Sort Key: foo.f1 NULLS FIRST
   ->  Foreign Scan on public.foo  (cost=25.00..32.00 rows=7 width=8)
         Output: id, f1
         Foreign Table Size: 7 b
         Remote SQL: SELECT id, f1 FROM public.foo
(7 rows)

--Testcase 49:
SELECT * FROM foo ORDER BY f1 NULLS FIRST;
 id | f1 
----+----
  5 |   
  6 |   
  7 |  1
  2 |  3
  4 |  7
  3 | 10
  1 | 42
(7 rows)

--Testcase 50:
EXPLAIN VERBOSE
SELECT * FROM foo ORDER BY f1 DESC;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Sort  (cost=32.10..32.12 rows=7 width=8)
   Output: id, f1
   Sort Key: foo.f1 DESC
   ->  Foreign Scan on public.foo  (cost=25.00..32.00 rows=7 width=8)
         Output: id, f1
         Foreign Table Size: 7 b
         Remote SQL: SELECT id, f1 FROM public.foo
(7 rows)

--Testcase 51:
SELECT * FROM foo ORDER BY f1 DESC;
 id | f1 
----+----
  5 |   
  6 |   
  1 | 42
  3 | 10
  4 |  7
  2 |  3
  7 |  1
(7 rows)

--Testcase 52:
EXPLAIN VERBOSE
SELECT * FROM foo ORDER BY f1 DESC NULLS LAST;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Sort  (cost=32.10..32.12 rows=7 width=8)
   Output: id, f1
   Sort Key: foo.f1 DESC NULLS LAST
   ->  Foreign Scan on public.foo  (cost=25.00..32.00 rows=7 width=8)
         Output: id, f1
         Foreign Table Size: 7 b
         Remote SQL: SELECT id, f1 FROM public.foo
(7 rows)

--Testcase 53:
SELECT * FROM foo ORDER BY f1 DESC NULLS LAST;
 id | f1 
----+----
  1 | 42
  3 | 10
  4 |  7
  2 |  3
  7 |  1
  5 |   
  6 |   
(7 rows)

--
-- Test planning of some cases with partial indexes
--
-- partial index is usable
--Testcase 54:
explain (costs off)
select * from onek2 where unique2 = 11 and stringu1 = 'ATAAAA';
              QUERY PLAN               
---------------------------------------
 Foreign Scan on onek2
   Filter: (stringu1 = 'ATAAAA'::name)
(2 rows)

--Testcase 55:
select * from onek2 where unique2 = 11 and stringu1 = 'ATAAAA';
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
     494 |      11 |   0 |    2 |   4 |     14 |       4 |       94 |          94 |       494 |      494 |   8 |    9 | ATAAAA   | LAAAAA   | VVVVxx
(1 row)

-- actually run the query with an analyze to use the partial index
--Testcase 56:
explain (costs off, analyze on, timing off, summary off)
select * from onek2 where unique2 = 11 and stringu1 = 'ATAAAA';
                  QUERY PLAN                   
-----------------------------------------------
 Foreign Scan on onek2 (actual rows=1 loops=1)
   Filter: (stringu1 = 'ATAAAA'::name)
(2 rows)

--Testcase 57:
explain (costs off)
select unique2 from onek2 where unique2 = 11 and stringu1 = 'ATAAAA';
              QUERY PLAN               
---------------------------------------
 Foreign Scan on onek2
   Filter: (stringu1 = 'ATAAAA'::name)
(2 rows)

--Testcase 58:
select unique2 from onek2 where unique2 = 11 and stringu1 = 'ATAAAA';
 unique2 
---------
      11
(1 row)

-- partial index predicate implies clause, so no need for retest
--Testcase 59:
explain (costs off)
select * from onek2 where unique2 = 11 and stringu1 < 'B';
            QUERY PLAN            
----------------------------------
 Foreign Scan on onek2
   Filter: (stringu1 < 'B'::name)
(2 rows)

--Testcase 60:
select * from onek2 where unique2 = 11 and stringu1 < 'B';
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
     494 |      11 |   0 |    2 |   4 |     14 |       4 |       94 |          94 |       494 |      494 |   8 |    9 | ATAAAA   | LAAAAA   | VVVVxx
(1 row)

--Testcase 61:
explain (costs off)
select unique2 from onek2 where unique2 = 11 and stringu1 < 'B';
            QUERY PLAN            
----------------------------------
 Foreign Scan on onek2
   Filter: (stringu1 < 'B'::name)
(2 rows)

--Testcase 62:
select unique2 from onek2 where unique2 = 11 and stringu1 < 'B';
 unique2 
---------
      11
(1 row)

-- but if it's an update target, must retest anyway
--Testcase 63:
explain (costs off)
select unique2 from onek2 where unique2 = 11 and stringu1 < 'B' for update;
               QUERY PLAN               
----------------------------------------
 LockRows
   ->  Foreign Scan on onek2
         Filter: (stringu1 < 'B'::name)
(3 rows)

--Testcase 64:
select unique2 from onek2 where unique2 = 11 and stringu1 < 'B' for update;
 unique2 
---------
      11
(1 row)

-- partial index is not applicable
--Testcase 65:
explain (costs off)
select unique2 from onek2 where unique2 = 11 and stringu1 < 'C';
            QUERY PLAN            
----------------------------------
 Foreign Scan on onek2
   Filter: (stringu1 < 'C'::name)
(2 rows)

--Testcase 66:
select unique2 from onek2 where unique2 = 11 and stringu1 < 'C';
 unique2 
---------
      11
(1 row)

-- partial index implies clause, but bitmap scan must recheck predicate anyway
--Testcase 67:
SET enable_indexscan TO off;
--Testcase 68:
explain (costs off)
select unique2 from onek2 where unique2 = 11 and stringu1 < 'B';
            QUERY PLAN            
----------------------------------
 Foreign Scan on onek2
   Filter: (stringu1 < 'B'::name)
(2 rows)

--Testcase 69:
select unique2 from onek2 where unique2 = 11 and stringu1 < 'B';
 unique2 
---------
      11
(1 row)

--Testcase 70:
RESET enable_indexscan;
-- check multi-index cases too
--Testcase 71:
explain (costs off)
select unique1, unique2 from onek2
  where (unique2 = 11 or unique1 = 0) and stringu1 < 'B';
            QUERY PLAN            
----------------------------------
 Foreign Scan on onek2
   Filter: (stringu1 < 'B'::name)
(2 rows)

--Testcase 72:
select unique1, unique2 from onek2
  where (unique2 = 11 or unique1 = 0) and stringu1 < 'B';
 unique1 | unique2 
---------+---------
     494 |      11
       0 |     998
(2 rows)

--Testcase 73:
explain (costs off)
select unique1, unique2 from onek2
  where (unique2 = 11 and stringu1 < 'B') or unique1 = 0;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Foreign Scan on onek2
   Filter: (((unique2 = 11) AND (stringu1 < 'B'::name)) OR (unique1 = 0))
(2 rows)

--Testcase 74:
select unique1, unique2 from onek2
  where (unique2 = 11 and stringu1 < 'B') or unique1 = 0;
 unique1 | unique2 
---------+---------
     494 |      11
       0 |     998
(2 rows)

--Testcase 75:
DROP SERVER :DB_SERVERNAME CASCADE;
psql:sql/15.4/select.sql:353: NOTICE:  drop cascades to 6 other objects
DETAIL:  drop cascades to user mapping for public on server postgres_server
drop cascades to foreign table onek
drop cascades to foreign table onek2
drop cascades to foreign table int8_tbl
drop cascades to foreign table nocols
drop cascades to foreign table foo
--Testcase 76:
DROP EXTENSION :DB_EXTENSIONNAME CASCADE;
